-- query to get empname,empnumber,sal,deptname,location from emp with employee id 7499
declare
v_empno emp.empno%type;
v_ename emp.ename%type;
v_sal emp.sal%type;
v_dname dept.dname%type;
v_loc  dept.loc%type;
begin
select ename,empno,sal,dname,loc into v_ename,v_empno,v_sal,v_dname,v_loc from emp join dept on emp.deptno=dept.deptno where empno=7499;
dbms_output.put_line(v_ename||v_empno||v_sal||v_dname||v_loc);
end;
/



--##USER DEFINED DATATYPE
--create V_UD_RES (not case sensitive) as a dataype. Create v_RES variable with V_UD_RES as datatype.

  1  declare
  2  type V_UD_RES is RECORD(empno number(10),
  3  ename varchar2(20),            --static datatype allocation
  4  sal number(10,2),
  5  dname dept.dname%type,         --reference datatpe allocation
  6  loc dept.loc%type);
  7  v_RES v_UD_RES;
  8  begin
  9  select e.empno,ename, sal,dname,loc into v_RES from emp e natural join dept where empno=7566;
 10  dbms_output.put_line(v_RES.ename||' '||v_RES.empno||' '||v_RES.sal||' '||v_RES.dname||' '||v_RES.loc);
 11* end;
 12  /
JONES 7566 2975 RESEARCH DALLAS                                               --output






  1  declare
  2  v_a number;
  3  v_b number;
  4  v_c number;
  5  begin
  6  v_a:=&v_a;
  7  v_b:=&v_b;
  8  v_c:=&v_c;
  9  if(v_a=v_b and v_a=v_c)
 10  then
 11  dbms_output.put_line('all three numbers are equal' );
 12     else if(v_a>v_b and v_a>v_c)
 13     then
 14             dbms_output.put_line(v_a||' is greater than '||v_b||' and '||v_C );
 15     else if (v_b>v_c) then
 16             dbms_output.put_line(v_b||' is greater than '||v_a||' and '||v_C);
 17     else
 18             dbms_output.put_line(v_c||' is greater than '||v_b ||' and '||v_a);
 19  end if;
 20  end if;
 21  end if;
 22* end;
 23  /
Enter value for v_a: 5
old   6: v_a:=&v_a;
new   6: v_a:=5;
Enter value for v_b: 4
old   7: v_b:=&v_b;
new   7: v_b:=4;
Enter value for v_c: 3
old   8: v_c:=&v_c;
new   8: v_c:=3;
5 is greater than 4 and 3

PL/SQL procedure successfully completed.

--SWITCH CASE
declare
a number(3);
b number(3);
c varchar2(5);
begin
a:=&a;
b:=&b;
c:='&c';
case c
when 'add' then dbms_output.put_line(a+b);
when 'multiply' then dbms_output.put_line(a*b);
when 'sub' then dbms_output.put_line(a-b);
else
dbms_output.put_line('invalid option');
end case;
end;
/
--output
Enter value for a: 7
old   6: a:=&a;
new   6: a:=7;
Enter value for b: 5
old   7: b:=&b;
new   7: b:=5;
Enter value for c: sub
old   8: c:='&c';
new   8: c:='sub';
2

PL/SQL procedure successfully completed.





--LOOPS
(to get infinite loop, dont write exit when statement)

  1  declare
  2  v_i number:=1;
  3  begin
  4  loop
  5  dbms_output.put_line(v_i);
  6  v_i:=v_i+1;
  7  exit when (v_i=10);
  8  end loop;
  9* end;
 10  /
1
2
3
4
5
6
7
8
9

--WHILE LOOP
 1  declare
  2  v_i number:=1;
  3  begin
  4  while v_i<=10 loop
  5  dbms_output.put_line(v_i);
  6  v_i:=v_i+1;
  7  end loop;
  8* end;
  9  /
1
2
3
4
5
6
7
8
9
10

PL/SQL procedure successfully completed.

--to print on one line-> use put() and (put_line() at the end outside the loop);
